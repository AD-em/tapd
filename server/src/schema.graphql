scalar DateTime
type Query {
  getAllTasks: [Task]!
  getTask(id: ID): Task!
}

type Mutation {
  createNewTask(newTaskParams: TaskCreateInput!): Task!
  finalizeTask(finalizeTaskParams: TaskFinalizeInput!): Task!
  signup(signupParams: UserInput!): AuthPayload!
  signin(signInParams: UserInput!): AuthPayload!
  resetPassword(resetPasswordParams: UserInput!): AuthPayload!
  signout: Boolean!
}

type AuthPayload {
  id: ID!
  email: String!
}

type User {
  id: ID!
  email: String!
  password: String!
  Tasks: [Task]!
}

type Task {
  id: ID!
  created_at: DateTime!
  title: String!
  description: String!
  done: Boolean!
  durationInMinutes: Int!
  startTime: DateTime
  estimatedEndTime: DateTime
  actualEndTime: DateTime
  breakEndTime: DateTime
  estimatedWorkDurationToActualWorkDurationRatio: Float
  User: User
}

input TaskCreateInput {
  title: String!
  description: String!
  durationInMinutes: Int!
  userId: ID!
}

input TaskFinalizeInput {
  id: ID!
  done: Boolean!
  actualEndTime: DateTime!
  breakEndTime: DateTime!
  estimatedWorkDurationToActualWorkDurationRatio: Float!
}

input UserInput {
  email: String!
  password: String!
}
